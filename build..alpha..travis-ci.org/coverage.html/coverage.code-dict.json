{"/home/travis/build/npmtest/node-npmtest-fly/test.js":"/* istanbul instrument in package npmtest_fly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fly/lib.npmtest_fly.js":"/* istanbul instrument in package npmtest_fly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fly = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fly = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fly/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fly && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fly\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fly.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fly.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fly.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fly.__dirname + '/lib.npmtest_fly.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/fly.js":"\"use strict\"\n\nconst res = require(\"path\").resolve\nconst Promise = require(\"bluebird\")\nconst Emitter = require(\"events\")\nconst wrapp = require(\"./wrapp\")\nconst util = require(\"./utils\")\nconst Task = require(\"./task\")\nconst $ = require(\"./fn\")\n\nconst co = Promise.coroutine\n\nclass Fly extends Emitter {\n\tconstructor(opts) {\n\t\tsuper()\n\n\t\topts = opts || {}\n\n\t\tconst file = opts.file\n\t\tconst plugins = opts.plugins || []\n\t\tconst tasks = opts.tasks || file && require(file) || {}\n\n\t\t// if custom `tasks`, must be object\n\t\tif (!$.isObject(tasks)) {\n\t\t\tthis.emit(\"tasks_force_object\")\n\t\t\treturn\n\t\t}\n\n\t\tthis.file = file\n\t\tthis.root = res(opts.cwd || \".\")\n\n\t\t// construct V8 shapes\n\t\tthis.tasks = {}\n\t\tthis.plugins = {}\n\t\tthis.plugNames = []\n\n\t\tthis.start = co(this.start).bind(this)\n\t\tthis.serial = co(this.serial).bind(this)\n\t\tthis.parallel = co(this.parallel).bind(this)\n\n\t\t// nothing to do, stop\n\t\tif (!file && $.isEmptyObj(tasks)) {\n\t\t\treturn\n\t\t}\n\n\t\tfor (const k in tasks) {\n\t\t\tif (!(tasks[k].call)) continue\n\t\t\tthis.tasks[k] = {\n\t\t\t\tdata: {files: [], globs: [], prevs: []},\n\t\t\t\tfunc: co(tasks[k])\n\t\t\t}\n\t\t}\n\n\t\tlet fn, i = 0\n\t\tfor (; i < plugins.length; i++) {\n\t\t\tif (!plugins[i]) continue\n\t\t\tfn = plugins[i]\n\t\t\tif ($.isObject(fn)) {\n\t\t\t\tthis.plugin(fn)\n\t\t\t} else if (fn.call) {\n\t\t\t\tfn.call(this, this, util)\n\t\t\t}\n\t\t}\n\t}\n\n\tplugin(name, opts, func) {\n\t\t// accept an object with all val\n\t\tif ($.isObject(name)) {\n\t\t\topts = name\n\t\t\tname = opts.name\n\t\t}\n\t\t// check if plugin name exists\n\t\tconst nxt = $.valUniq(name, this.plugNames)\n\t\t// if it did, emit event warning\n\t\tif (nxt !== name) {\n\t\t\tthis.emit(\"plugin_rename\", name, nxt)\n\t\t}\n\t\t// save / reserve plugin name\n\t\tthis.plugNames.push(nxt)\n\t\t// safely attach to `plugins` object\n\t\tthis.plugins[nxt] = wrapp(opts, func)\n\t}\n\n\t*start(name, opts) {\n\t\tname = name || \"default\"\n\t\topts = Object.assign({src: null, val: null}, opts)\n\n\t\tconst task = this.tasks[name]\n\n\t\tif (!task) {\n\t\t\treturn this.emit(\"task_not_found\", name)\n\t\t}\n\n\t\t// restore previous data, if any\n\t\tconst old = task.data.prevs || []\n\t\t// new task ~> reset `data`\n\t\ttask.data = {files: [], globs: [], prevs: old}\n\n\t\ttry {\n\t\t\t// get start time\n\t\t\tconst start = process.hrtime()\n\t\t\t// announce start\n\t\t\tthis.emit(\"task_start\", name)\n\t\t\t// attempt to execute\n\t\t\tconst val = yield new Task(this).exec(task.func, opts, task.data)\n\t\t\t// announce completion\n\t\t\tconst end = process.hrtime(start)\n\t\t\tthis.emit(\"task_complete\", name, end)\n\t\t\t// send back\n\t\t\treturn val\n\t\t} catch (err) {\n\t\t\tthis.emit(\"task_error\", name, err.message)\n\t\t\tthrow err\n\t\t}\n\t}\n\n\t*parallel(tasks, opts) {\n\t\ttry {\n\t\t\tyield Promise.all(tasks.map(t => this.start(t, opts)))\n\t\t} catch (err) {\n\t\t\t//\n\t\t}\n\t}\n\n\t*serial(tasks, opts) {\n\t\topts = opts || {}\n\t\ttry {\n\t\t\treturn yield Promise.reduce(tasks, (val, str) => {\n\t\t\t\tval && Object.assign(opts, { val })\n\t\t\t\treturn this.start(str, opts)\n\t\t\t}, opts.val || null)\n\t\t} catch (err) {\n\t\t\tthis.emit(\"serial_error\")\n\t\t}\n\t}\n}\n\nmodule.exports = Fly\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/wrapp.js":"\"use strict\"\n\nconst Promise = require(\"bluebird\")\nconst co = Promise.coroutine\n\nmodule.exports = function (opts, func) {\n\t// assign against defaults\n\topts = Object.assign({every: 1, files: 1}, opts)\n\tfunc = opts.func || func\n\n\treturn co(function * (o) {\n\t\to = o || {}\n\t\tconst args = []\n\t\targs.push.apply(args, arguments) && args.shift()\n\t\t// grab alias to chosen source type\n\t\tconst arr = this._[opts.files ? \"files\" : \"globs\"]\n\t\t// wrapper pass all arguments to plugin func\n\t\tconst run = s => co(func).apply(this, [s, o].concat(args))\n\t\t// loop thru EACH if `every`, else send full source array\n\t\tyield (opts.every ? Promise.all(arr.map(run)) : run(arr))\n\t\t// send back instance allow chain\n\t\treturn this\n\t})\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/utils/index.js":"\"use strict\"\n\nconst Promise = require(\"bluebird\")\nconst logging = require(\"./logging\")\n\nmodule.exports = Object.assign(logging, {\n\tcoroutine: Promise.coroutine,\n\texpand: require(\"./expand\"),\n\tfind: require(\"./find\"),\n\tpromisify: Promise.promisify,\n\tread: require(\"./read\"),\n\ttrace: require(\"./trace\"),\n\twrite: require(\"./write\")\n})\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/utils/logging.js":"\"use strict\"\n\n/**\n * @todo\n * \t\t- use \"fmt\" object definitions\n * \t\t- use es2015\n */\n\nconst clor = require(\"clor\")\nconst homedir = require(\"os\").homedir\nconst getTime = require(\"../fn\").getTime\n\n/**\n * Apply args to the `console[method]` & Add a date stamp.\n * Bind `this` to an object with the following options:\n *\n * @param  {String} args.date     The color string to use for the date\n * @param  {String} args.method   The `console` method to use\n * @param  {String} args.custom   The custom styling to append to args\n */\nfunction stamp() {\n\tlet i = 0\n\tconst args = new Array(arguments.length)\n\t// i is always valid index\n\tfor (; i < args.length; ++i) {\n\t\targs[i] = arguments[i]\n\t}\n\n\t// if (process.env.DEBUG) {\n\t// \treturn _.apply(_, args)\n\t// }\n\n\t// print the curr time.\n\tprocess.stdout.write(`[${clor[this.color](getTime())}] `)\n\n\t// apply arguments to `console` method\n\tconsole[this.method].apply(console, (this.custom ? [this.custom].concat(args) : args))\n}\n\n/**\n * Logging Utilities\n */\n\nfunction log() {\n\tstamp.apply({method: \"log\", color: \"magenta\"}, arguments)\n\treturn this\n}\n\nfunction error() {\n\tstamp.apply({method: \"error\", color: \"red\"}, arguments)\n\treturn this\n}\n\nfunction alert() {\n\tif (process.env.VERBOSE) {\n\t\tstamp.apply({\n\t\t\tcustom: clor.yellow.bold(\"%s\"),\n\t\t\tcolor: \"yellow\",\n\t\t\tmethod: \"log\"\n\t\t}, arguments)\n\t}\n\treturn this\n}\n\nmodule.exports = {alert, error, log}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/fn.js":"/* eslint no-nested-ternary:0 */\n\"use strict\"\n\nconst $ = exports\n\n// @see http://stackoverflow.com/a/16608074\n$.isObject = val => Boolean(val) && (val.constructor === Object)\n\n$.isEmptyObj = val => $.isObject(val) && !Object.keys(val).length\n\n$.toArray = val => (val === null || val === undefined) ? [] : Array.isArray(val) ? val : [val]\n\n/**\n * Format a task's duration.\n * @param  {Array} arr  Output from `process.hrtime`\n * @return {String}\n */\n$.formatTime = arr => {\n\tlet unit = \"ms\"\n\tlet num = Math.round(arr[1] / 1000000)\n\tif (arr[0] > 0) {\n\t\tunit = \"s\"\n\t\tnum = (arr[0] + num / 1000).toFixed(2)\n\t}\n\treturn `${num}${unit}`\n}\n\n/**\n * Get the current time!\n * @return {String}  Formatted as `HH:MM:ss`.\n */\n$.getTime = () => new Date().toTimeString(\"UTC\").match(/[^\\s]+/)[0]\n\n/**\n * Check if value is unique within the group. Modify if is not.\n * @param  {String} val  The value to check.\n * @param  {Array}  arr  The array of values to check against.\n * @return {String}      The unique value possibly incremented.\n */\n$.valUniq = (val, arr) => {\n\tlet n = 0\n\tlet v = val\n\twhile (arr.indexOf(v) !== -1) {\n\t\tn++\n\t\tv = val.concat(n)\n\t}\n\treturn v\n}\n\n/**\n * Get a unique Set of Array values\n * @param  {Array} arr  The values to check\n * @return {Set}        The unique values\n */\n$.getUniques = arr => {\n\tconst len = arr.length\n\tconst res = []\n\tlet i = 0\n\n\tfor (; i < len; i++) {\n\t\tconst curr = arr[i]\n\t\tif (res.indexOf(curr) === -1) {\n\t\t\tres.push(curr)\n\t\t}\n\t}\n\n\treturn res\n}\n\nfunction flat(arr, res) {\n\tconst len = arr.length\n\tlet i = 0\n\tfor (; i < len; i++) {\n\t\tconst cur = arr[i]\n\t\tArray.isArray(cur) ? flat(cur, res) : res.push(cur)\n\t}\n\treturn res\n}\n\n$.flatten = arr => flat(arr, [])\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/utils/expand.js":"\"use strict\"\n\nconst Promise = require(\"bluebird\")\nconst glob = Promise.promisify(require(\"glob\"))\nconst getUniques = require(\"../fn\").getUniques\nconst toArray = require(\"../fn\").toArray\n\nconst isString = val => typeof val === \"string\"\nconst hasIgnore = val => val[0] === \"!\"\n\nfunction validate(arr) {\n\tif (!arr.every(isString)) {\n\t\tthrow new TypeError(\"All patterns must be strings!\")\n\t}\n}\n\nmodule.exports = function (patterns, opts) {\n\topts = opts || {}\n\tpatterns = toArray(patterns)\n\n\ttry {\n\t\tvalidate(patterns)\n\t} catch (err) {\n\t\treturn Promise.reject(err)\n\t}\n\n\tlet ignore\n\tconst globs = []\n\tconst ignores = toArray(opts.ignore) || []\n\n\tpatterns.forEach((pat, i) => {\n\t\tif (hasIgnore(pat)) {\n\t\t\treturn\n\t\t}\n\n\t\tignore = ignores.concat(\n\t\t\tpatterns.slice(i).filter(hasIgnore).map(p => p.slice(1))\n\t\t)\n\n\t\tglobs.push({\n\t\t\tpattern: pat,\n\t\t\toptions: Object.assign({}, opts, {ignore})\n\t\t})\n\t})\n\n\treturn Promise.all(\n\t\tglobs.map(g => glob(g.pattern, g.options))\n\t).then(all => getUniques([].concat.apply([], all)))\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/utils/find.js":"\"use strict\"\n\nconst p = require(\"path\")\nconst promisify = require(\"bluebird\").promisify\nconst glob = promisify(require(\"glob\"))\nconst normalize = p.normalize\nconst resolve = p.resolve\n\n/**\n * Find a file from a given path\n * @param {String} file  The filename to find.\n * @param {String} dir   The directory to begin searching within.\n * @yield {String}       The file\"s full path or `null`.\n */\nmodule.exports = function (file, dir) {\n\treturn glob(resolve(dir || \".\", file)).then(arr => arr.length ? normalize(arr[0]) : null)\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/utils/read.js":"\"use strict\"\n\nconst fs = require(\"fs\")\nconst Promise = require(\"bluebird\")\nconst stat = Promise.promisify(fs.stat)\nconst read = Promise.promisify(fs.readFile)\nconst co = Promise.coroutine\n\n/**\n * Return a file's contents. Will not read directory!\n * @param {String}        file  The file's path.\n * @param {Object|String} opts  See `fs.readFile`.\n * @yield {Buffer|String}\n */\nmodule.exports = co(function * (file, opts) {\n\tconst s = yield stat(file)\n\treturn s.isFile() ? yield read(file, opts) : null\n})\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/utils/trace.js":"\"use strict\"\n\nconst extractPath = /\\s+at.*(?:\\(|\\s)(.*)\\)?/\nconst isPath = /^(?:(?:(?:node|(?:internal\\/[\\w/]*)?\\w+)\\.js:\\d+:\\d+)|native)/\n\nmodule.exports = function (stack) {\n\treturn stack.replace(/\\\\/g, \"/\")\n\t\t.split(\"\\n\")\n\t\t.filter(x => {\n\t\t\tconst pathMatches = x.match(extractPath)\n\n\t\t\tif (pathMatches === null || !pathMatches[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn !isPath.test(pathMatches[1])\n\t\t})\n\t\t.filter(x => x.trim() !== \"\")\n\t\t.join(\"\\n\")\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/utils/write.js":"\"use strict\"\n\nconst p = require(\"path\")\nconst Promise = require(\"bluebird\")\nconst write = Promise.promisify(require(\"fs\").writeFile)\nconst mkdirp = Promise.promisify(require(\"mkdirp\"))\nconst normalize = p.normalize\nconst dirname = p.dirname\n\n/**\n * Write to a file with given data.\n * Creates ancestor directories if needed.\n * @param {String} file  The full file\"s path.\n * @param {String} data  The data to write.\n * @param {Object} opts  See `fs.writeFile`.\n */\nmodule.exports = Promise.coroutine(function * (file, data, opts) {\n\ttry {\n\t\tfile = normalize(file)\n\t\tyield mkdirp(dirname(file))\n\t\tyield write(file, data, opts)\n\t} catch (_) {}\n})\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/task.js":"\"use strict\"\n\nconst p = require(\"path\")\nconst Promise = require(\"bluebird\")\nconst wrapp = require(\"./wrapp\")\nconst util = require(\"./utils\")\nconst boot = require(\"./boot\")\nconst $ = require(\"./fn\")\n\nconst RGX = /[\\\\|\\/]/g\nconst co = Promise.coroutine\nconst normalize = p.normalize\nconst format = p.format\nconst parse = p.parse\nconst sep = p.sep\n\nfunction Task(fly) {\n\t// construct shape\n\tthis.$ = util\n\tthis.root = fly.root\n\tthis._ = {files: [], globs: [], prevs: []}\n\t// attach parent fns to Task\n\tthis.parallel = fly.parallel.bind(fly)\n\tthis.serial = fly.serial.bind(fly)\n\tthis.start = fly.start.bind(fly)\n\tthis.emit = fly.emit.bind(fly)\n\t// attach `fly.plugins` to prototype\n\tfor (const k in fly.plugins) {\n\t\tthis[k] = fly.plugins[k].bind(this)\n\t}\n\t// return chained methods + shared\n\treturn boot(this)\n}\n\nTask.prototype.exec = function(fn, opts, data) {\n\t// cache ref to `fly.tasks[].data` values\n\tthis._ = data\n\treturn fn.call(this, this, opts)\n}\n\nTask.prototype.run = co(function * (opts, func) {\n\treturn yield wrapp(opts, func).call(this)\n})\n\nTask.prototype.source = co(function * (globs, opts) {\n\tglobs = $.flatten($.toArray(globs))\n\tconst files = yield this.$.expand(globs, opts)\n\n\tif (globs.length && !files.length) {\n\t\tthis.emit(\"globs_no_match\", globs, opts)\n\t}\n\n\t// pre-fetch each file\"s content\n\tconst datas = yield Promise.all(files.map(f => this.$.read(f)))\n\n\t// update known globs\n\tthis._.globs = globs\n\t// update known files, as (mod\"d) `pathObject`s\n\tthis._.files = files.map((el, idx) => {\n\t\tconst obj = parse(el)\n\t\treturn {\n\t\t\tdir: normalize(obj.dir),\n\t\t\tdata: datas[idx],\n\t\t\tbase: obj.base\n\t\t}\n\t})\n})\n\nTask.prototype.target = co(function * (dirs, opts) {\n\tdirs = $.flatten($.toArray(dirs))\n\topts = opts || {}\n\n\tconst files = this._.files\n\t// using `watcher`? original globs passed as `prevs`\n\t// non-wildcard glob segments that should be trimmed!\n\tconst globs = (this._.prevs && this._.prevs.length > 0) ? this._.prevs : this._.globs\n\n\tconst trims = globs.map(g => {\n\t\tlet seg = g.split(RGX)\n\t\tconst idx = seg.findIndex(str => str.includes(\"*\"))\n\n\t\tif (idx === -1) {\n\t\t\tseg.pop()\n\t\t} else {\n\t\t\tseg = seg.slice(0, idx)\n\t\t}\n\n\t\treturn normalize(seg.join(sep))\n\t}).sort((a, b) => b.length - a.length)\n\n\tconst tLength = trims.length\n\n\treturn yield Promise.all(\n\t\t$.flatten(\n\t\t\tfiles.map(obj => dirs.map(d => {\n\t\t\t\tlet i = 0\n\t\t\t\t// clone `pathObject` per target dir\n\t\t\t\tconst o = { dir: obj.dir, base: obj.base }\n\t\t\t\t// replace `source` segments with `target` dir\n\t\t\t\tfor (; i < tLength; i++) {\n\t\t\t\t\to.dir = o.dir.replace(trims[i], d)\n\t\t\t\t}\n\t\t\t\t// create final filepath & write to it!\n\t\t\t\treturn this.$.write(format(o), obj.data, opts)\n\t\t\t}))\n\t\t)\n\t)\n})\n\nmodule.exports = Task\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/boot.js":"\"use strict\"\n\nconst Promise = require('bluebird');\n\nfunction deferAll(obj) {\n  const o = {}\n  for (const k in obj) {\n    o[k] = function () {\n      return this.then(() => obj[k].apply(obj, arguments))\n    }\n  }\n  return o\n}\n\nfunction wrapAll(obj) {\n  const o = {}\n  for (const k in obj) {\n    if (!(obj[k].call)) continue // only functions\n    o[k] = wrap(obj[k]).bind(obj)\n  }\n  return o\n}\n\nfunction wrap(fn) {\n  return function () {\n    return fn.apply(this, arguments)\n  }\n}\n\nfunction liquidate(obj) {\n  const promised = wrapAll(obj)\n  // merge with Promise API\n  Object.assign(Promise.prototype, deferAll(promised))\n  return promised\n}\n\nmodule.exports = liquidate\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/cli.js":"#!/usr/bin/env node\n\"use strict\"\n\nconst Promise = require(\"bluebird\")\nconst reporter = require(\"./lib/reporter\")\nconst utils = require(\"./lib/utils\")\nconst cli = require(\"./lib/cli\")\nconst pkg = require(\"./package\")\nconst co = Promise.coroutine\n\nco(function* () {\n\t// get command options\n\tconst o = cli.options()\n\tconst t = o._.length ? o._ : [\"default\"]\n\n\tif (o.help) {\n\t\treturn cli.help()\n\t}\n\n\tif (o.version) {\n\t\treturn cli.version(pkg)\n\t}\n\n\tconst fly = yield cli.spawn(o.cwd)\n\treporter.call(fly)\n\n\tif (!fly.file) {\n\t\treturn fly.emit(\"flyfile_not_found\")\n\t}\n\n\tif (o.list) {\n\t\treturn cli.list(fly.tasks, o.list === \"bare\")\n\t}\n\n\t// announce start\n\tfly.emit(\"fly_run\", fly.file)\n\t// run `tasks` in `mode`\n\tfly[o.mode](t)\n\n})().catch(err => {\n\tif (err.type === \"cli\") {\n\t\tutils.error(`CLI Error! ${err.message}`)\n\t} else {\n\t\tconsole.error(utils.trace(err.stack))\n\t}\n})\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/reporter.js":"\"use strict\"\n\nconst fmt = require(\"./fmt\")\nconst $ = require(\"./utils/logging\")\nconst formatTime = require(\"./fn\").formatTime\n\nmodule.exports = function () {\n\treturn this\n\t\t.on(\"fly_run\", file => {\n\t\t\t$.log(`Flying with ${fmt.path(file)}`)\n\t\t})\n\n\t\t.on(\"flyfile_not_found\", () => {\n\t\t\t$.log(\"Flyfile not found!\")\n\t\t\tprocess.exit(1)\n\t\t})\n\n\t\t.on(\"fly_watch\", () => {\n\t\t\t$.log(`${fmt.warn(\"Watching files...\")}`)\n\t\t})\n\n\t\t.on(\"fly_watch_event\", obj => {\n\t\t\t$.log(`File ${obj.action}: ${fmt.warn(obj.file)}`)\n\t\t})\n\n\t\t.on(\"globs_no_match\", (globs, opts) => {\n\t\t\tlet str = `${fmt.warn(\"Warning:\")} Source did not match any files!`\n\t\t\tstr += `\\n\\t  Patterns:   ${JSON.stringify(globs)}`\n\t\t\topts && (str += `\\n\\t  Options:    ${JSON.stringify(opts)}`)\n\t\t\t$.log(str)\n\t\t})\n\n\t\t.on(\"plugin_load\", obj => {\n\t\t\t$.log(`Loading plugin ${fmt.title(obj.plugin)}`)\n\t\t})\n\n\t\t.on(\"plugin_load_error\", str => {\n\t\t\t$.log(`Problem loading plugin: ${fmt.title(str)}`)\n\t\t})\n\n\t\t.on(\"plugin_rename\", (old, nxt) => {\n\t\t\t$.log(`${fmt.title(old)} was renamed to ${fmt.title(nxt)} because its name was taken`)\n\t\t})\n\n\t\t.on(\"plugin_warning\", obj => {\n\t\t\t$.log(`${fmt.warn(obj.plugin)} warned that ${fmt.warn(obj.warning)}`)\n\t\t})\n\n\t\t.on(\"plugin_error\", obj => {\n\t\t\tprocess.exitCode = 1\n\t\t\t$.log(`${fmt.error(obj.plugin)} failed because ${fmt.error(obj.error)}`)\n\t\t})\n\n\t\t.on(\"tasks_force_object\", () => {\n\t\t\t$.error(\"Invalid Tasks!\")\n\t\t\t$.log(\"Custom `tasks` must be an `object`.\")\n\t\t\tprocess.exit(1)\n\t\t})\n\n\t\t.on(\"task_error\", (name, msg) => {\n\t\t\t$.log(`${fmt.error(name)} failed because ${fmt.error(msg)}`)\n\t\t})\n\n\t\t.on(\"task_start\", str => {\n\t\t\t$.log(`Starting ${fmt.title(str)}`)\n\t\t})\n\n\t\t.on(\"task_complete\", (str, time) => {\n\t\t\tconst t = formatTime(time)\n\t\t\t$.log(`Finished ${fmt.complete(str)} in ${fmt.time(t)}`)\n\t\t})\n\n\t\t.on(\"task_not_found\", str => {\n\t\t\t$.log(`${fmt.error(str)} not found in Flyfile.`)\n\t\t\tprocess.exit(1)\n\t\t})\n\n\t\t.on(\"serial_error\", () => {\n\t\t\tprocess.exitCode = 1\n\t\t\t$.error(\"Task chain was aborted!\")\n\t\t})\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/fmt.js":"\"use strict\"\n\nconst c = require(\"clor\")\n\nmodule.exports = {\n\tcomplete: c.blue.bold,\n\ttitle: c.bold.yellow,\n\terror: c.bold.red,\n\tpath: c.underline.cyan,\n\twarn: c.bold.magenta,\n\ttext: c.bold.white,\n\ttime: c.green\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/cli/index.js":"\"use strict\"\n\nmodule.exports = {\n\thelp: require(\"./help\"),\n\tlist: require(\"./list\"),\n\toptions: require(\"./options\"),\n\tspawn: require(\"./spawn\"),\n\tversion: pkg => console.log(`${pkg.name}, ${pkg.version}`)\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/cli/help.js":"module.exports = _ =>\n    console.log(`\nUsage: fly [options] [tasks]\n\nOptions\n  -m  --mode=MODE   Run in 'parallel' or 'serial'. Default: 'serial'\n  -d  --cwd=DIR     Set Fly's home directory. Default: '.'\n  -h  --help        Display this help message.\n  -l  --list        Display available tasks.\n  -v  --version     Display Fly version.\n\nExamples\n  fly -d=/demo\n  fly -m=parallel task1 task2\n  fly --mode=serial  task1 task2\n`.replace(/^\\n/, \"\"))","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/cli/list.js":"\"use strict\"\n\nconst fmt = require(\"../fmt\")\nconst rgx = /@desc(.*)/\n\n/**\n * List available tasks within a Fly instance\n * @param {Object}  tasks  The available tasks\n * @param {Boolean} bare   Should output be unstyled?\n */\nmodule.exports = function (tasks, bare) {\n\tbare = bare || false\n\ttasks = tasks || {}\n\n\tconst out = [`\\n${fmt.text.dim(\"Available tasks\")}`]\n\n\t// parse tasks\" descriptions, if any\n\tfor (const k in tasks) {\n\t\tconst arr = rgx.exec(tasks[k].toString())\n\t\tconst txt = arr ? arr.pop().replace(/\\*\\//, \"\") : \"\"\n\t\tout.push(`\\t${fmt.title(k)}\\t${txt}`)\n\t}\n\n\tout.push(\"\")\n\n\tif (bare) {\n\t\tout.shift()\n\t\tout.pop()\n\t}\n\n\treturn console.log(out.join(\"\\n\"))\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/cli/options.js":"\"use strict\"\n\nconst parse = require(\"minimist\")\n\n/**\n * Check if string has special symbols\n * @param {string} str\n * @return {boolean}\n */\nconst hasSymbols = str => /[0-9-[\\]{}()*+?.,\\\\^$|#\\s]/.test(str)\n\n/**\n * Check if key is valid\n * @param {string} key\n * @returns {boolean}\n */\nconst isValidKey = key => !hasSymbols(key) && key.length > 1\n\n/**\n * Generic Error class for CLI errors\n */\nclass UnknownError extends Error {\n\tconstructor(msg) {\n\t\tsuper()\n\t\tthis.type = \"cli\"\n\t\tthis.message = msg\n\t}\n}\n\n/**\n * Make sense of an input string.\n * @param  {Array}  arr  Input argument segments\n * @return {Object}\n */\nmodule.exports = function (arr) {\n\treturn parse(arr || process.argv.slice(2), {\n\t\tdefault: {\n\t\t\tcwd: \".\",\n\t\t\tmode: \"serial\"\n\t\t},\n\t\talias: {\n\t\t\tv: \"version\",\n\t\t\tm: \"mode\",\n\t\t\th: \"help\",\n\t\t\tl: \"list\",\n\t\t\td: \"cwd\",\n\t\t\t_: \"tasks\"\n\t\t},\n\t\tunknown: key => {\n\t\t\tif (key[0] !== \"-\") {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tkey = key.slice(1)\n\t\t\tconst msg = `${isValidKey(key) ? \"Unknown\" : \"Invalid\"} option: \\`${key}\\`. Run \\`fly -h\\` to see available options.`\n\t\t\tthrow new UnknownError(msg)\n\t\t}\n\t})\n}\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/cli/spawn.js":"\"use strict\"\n\nconst co = require(\"bluebird\").coroutine\nconst load = require(\"../plugins\").load\nconst find = require(\"../utils/find\")\nconst read = require(\"../utils/read\")\nconst Fly = require(\"../fly\")\n\n/**\n * Create a new Fly instance\n * @param {String} cwd   The directory to find a `flyfile.js`\n * @return {Fly}         The new Fly instance\n */\nmodule.exports = co(function * (cwd) {\n\tconst file = yield find(\"flyfile.js\", cwd)\n\n\tif (!file) {\n\t\treturn new Fly()\n\t}\n\n\t// find & `require()`. will load `fly-esnext` before spawning\n\tconst plugins = yield load(file)\n\n\t// spawn options\n\tconst opts = {cwd, file, plugins}\n\n\ttry {\n\t\tconst esnext = require(\"fly-esnext\")\n\t\tif (esnext) {\n\t\t\tconst data = yield read(file, \"utf8\")\n\t\t\topts.tasks = esnext(file, data)\n\t\t}\n\t} catch (err) {}\n\n\treturn new Fly(opts)\n})\n","/home/travis/build/npmtest/node-npmtest-fly/node_modules/fly/lib/plugins.js":"\"use strict\"\n\nconst p = require(\"path\")\nconst isObject = require(\"./fn\").isObject\nconst flatten = require(\"./fn\").flatten\nconst co = require(\"bluebird\").coroutine\nconst $ = require(\"./utils\")\n\nconst rgx = /^(@.*?\\/fly-|fly-)/i\nconst dirname = p.dirname\nconst resolve = p.resolve\nconst join = p.join\n\n/**\n * Attempt to dynamically `require()` a file or package\n * @param  {String} name \tThe dep-name or filepath to require.\n * @param  {String} base \tPath to `node_modules` directory.\n */\nfunction req(name, base) {\n\ttry {\n\t\ttry {\n\t\t\tname = require.resolve(name)\n\t\t} catch (_) {\n\t\t\tname = join(base, name)\n\t\t} finally {\n\t\t\treturn require(name);\n\t\t}\n\t} catch (e) {\n\t\t$.alert(e.message)\n\t}\n}\n\n/**\n * Find a sibling `package.json` file & return its contents.\n * @param  {Object} file  A `package.json` contents as JSON\n * @return {Array}        The names of all dependencies, flattened\n */\nfunction getDependencies(pkg) {\n\tif (!pkg) {\n\t\treturn []\n\t}\n\n\tif (!isObject(pkg)) {\n\t\t$.error(\"Content from `package.json` must be an `Object`!\")\n\t\treturn []\n\t}\n\n\t// get all possible dependencies\n\tconst deps = [\"dependencies\", \"devDependencies\", \"peerDependencies\"]\n\t\t.filter(key => key in pkg).map(dep => Object.keys(pkg[dep]))\n\n\treturn flatten(deps)\n}\n\n/**\n * Find & Read a `package.json` file, starting from `dir`.\n * @param {String} dir\n * @yield {Object}      If found, returns as `{file, data}`\n */\nconst getPackage = co(function * (dir) {\n\t// traverse upwards from `dir`\n\tconst file = yield $.find(\"package.json\", dir)\n\n\tif (!file) {\n\t\treturn false\n\t}\n\n\t// check if there\"s a \"fly\" config entry\n\tconst data = JSON.parse(yield $.read(file))\n\n\tif (data.fly && data.fly.pkg) {\n\t\tdir = resolve(dir, data.fly.pkg)\n\t\treturn yield getPackage(dir)\n\t}\n\n\treturn {file, data}\n})\n\n/**\n * Loads all fly-related plugins!\n * @param  {String} flyfile  The full `flyfile.js` path\n * @return {Array}           All loaded plugins.\n */\nconst load = co(function * (flyfile) {\n\t// find a `package.json`, starting with `flyfile` dir\n\tconst pkg = yield getPackage(dirname(flyfile))\n\n\tif (!pkg) {\n\t\t$.error(\"No `package.json` found!\")\n\t\treturn []\n\t}\n\n\t// get ALL deps filter down to fly-only\n\tconst deps = getDependencies(pkg.data).filter(dep => rgx.test(dep))\n\tconst locals = pkg.data.fly && pkg.data.fly.requires\n\tconst hasNext = deps.indexOf(\"fly-esnext\")\n\n\tif (locals) {\n\t\tlet i = 0\n\t\tconst len = locals.length\n\t\tconst pkgDir = dirname(pkg.file)\n\t\tfor (; i < len; i++) {\n\t\t\tdeps.push(join(pkgDir, locals[i]))\n\t\t}\n\t}\n\n\t// if \"fly-esnext\" remove from `deps`\n\tif (hasNext !== -1) {\n\t\tdeps.splice(hasNext, 1)\n\t}\n\n\tconst modules = join(dirname(pkg.file), \"node_modules\")\n\n\t// format return\n\treturn deps.map(str => req(str, modules))\n})\n\nmodule.exports = {\n\tload,\n\tgetPackage,\n\tgetDependencies\n}\n"}